Console.WriteLine("Do you want to encrypt or decrypt data?");
Console.WriteLine("1. Encrypt");
Console.WriteLine("2. Decrypt");
bool isNumber = int.TryParse(Console.ReadLine(), out int userChoice);
while (!isNumber)
{
    Console.Clear();
    Console.WriteLine("Do you want to encrypt or decrypt data?");
    Console.WriteLine("1. Encrypt");
    Console.WriteLine("2. Decrypt");
    isNumber = int.TryParse(Console.ReadLine(), out userChoice);
}

Console.Clear();

switch (userChoice)
{
    case 1:
        string encryptedMessage = Encrypt(GetUserInput("encrypt"), GetFenceHeight());
        Console.WriteLine("Encrypted message: " + encryptedMessage);
        break;

    case 2:
        string decryptedMessege = Decrypt(GetUserInput("decrypt"), GetFenceHeight());
        Console.WriteLine("Decrypted message: " + decryptedMessege);
        break;
}

string GetUserInput(string message)
{
    Console.Write("Write data which you want to " + message + ": ");
    string userInput = Console.ReadLine();
    return userInput;
}

int GetFenceHeight()
{
    Console.WriteLine("\n1. Height of fence - 2 rows");
    Console.WriteLine("2. Height of fence - 4 rows");
    Console.WriteLine("3. Height of fence - 5 rows");
    Console.WriteLine("4. Default settings (3 rows)");
    Console.Write("Choose height of fence: ");
    isNumber = int.TryParse(Console.ReadLine(), out userChoice);

    while (!isNumber)
    {
        Console.Clear();
        Console.WriteLine("\n1. Height of fence - 2 rows");
        Console.WriteLine("2. Height of fence - 4 rows");
        Console.WriteLine("3. Height of fence - 5 rows");
        Console.WriteLine("4. Default settings (3 rows)");
        Console.Write("Choose height of fence: ");
        isNumber = int.TryParse(Console.ReadLine(), out userChoice);
    }

    int fenceHeight = 3;

    switch (userChoice)
    {
        case 1:
            fenceHeight = 2;
            break;
        case 2:
            fenceHeight = 4;
            break;
        case 3:
            fenceHeight = 5;
            break;
        case 4:
            break;
    }
    return fenceHeight;
}
static string Encrypt(string userInput, int fenceHeight)
{
    char[,] fence = new char[fenceHeight, userInput.Length];

    int row = 0;
    int direction = 1;
    for (int i = 0; i < userInput.Length; i++)
    {
        fence[row, i] = userInput[i];

        if (row == fenceHeight - 1)
            direction = -1;
        else if (row == 0)
            direction = 1;

        row += direction;
    }

    string encryptedMessage = "";
    for (int i = 0; i < fenceHeight; i++)
    {
        for (int j = 0; j < userInput.Length; j++)
        {
            encryptedMessage += fence[i, j];
        }
    }
    return encryptedMessage;
}

static string Decrypt(string userInput, int fenceHeight)
{
    char[,] fence = new char[fenceHeight, userInput.Length];

    int row = 0;
    int direction = 1;
    int[] array = new int[fenceHeight];
    string[] strArray = new string[fenceHeight];

    for (int i = 0; i < userInput.Length; i++) 
    {
        array[row]++;

        if (row == fenceHeight - 1)
            direction = -1;
        else if (row == 0)
            direction = 1;
        row += direction;
    }

    int j = 0;

    for (row = 0; row < fenceHeight; row++)
    {
        for (int i = 0; i < array[row]; i++)
        {
            strArray[row] += userInput[j];
            j++;
        }
    }

    int[] indexArray = new int[fenceHeight];
    row = 0;

    for (int i = 0; i < userInput.Length; i++)
    {
        string temp = strArray[row];

        fence[row, i] = temp[indexArray[row]];
        indexArray[row]++;


        if (row == fenceHeight - 1)
            direction = -1;
        else if (row == 0)
            direction = 1;
        row += direction;
    }

    string decryptedMessage = "";

    for (int i = 0; i < userInput.Length; i++)
    {
        for (int k = 0; k < fenceHeight; k++)
        {
            if (fence[k, i] != '.')
            {
                decryptedMessage += fence[k, i];
            }
        }
    }

    return decryptedMessage;
}


